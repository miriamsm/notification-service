export enum NotificationChannel {
  EMAIL = 'email',  // For email notifications 
  SMS = 'sms',      // For text messages 
  PUSH = 'push'     // For mobile push notifications 
}
export enum NotificationStatus {
  PENDING = 'pending',
  QUEUED = 'queued',
  PROCESSING = 'processing',
  SENT = 'sent',
  FAILED = 'failed',
  RETRYING = 'retrying'
}

// DTOs - Data Transfer Objects
export interface CreateNotificationDTO {
  user_id: string;                    // Who receives the notification
  channel: NotificationChannel;       // How to send it (email/sms/push)
  template: string;                   // Which template to use (e.g., 'welcome_email')
  data: Record<string, any>;          // Variables for the template (e.g., {name: 'John'})
}

// DATABASE MODELS
export interface Notification {
  id: string;                         // UUID generated by database
  user_id: string;                    // Recipient's user ID
  channel: NotificationChannel;       // Delivery method
  template_id: string;                // Template identifier
  data: Record<string, any>;          // Template variables (stored as JSONB)
  status: NotificationStatus;         // Current status
  idempotency_key: string;            // Hash to prevent duplicates
  error_message?: string;             // Error details if failed (optional)
  retry_count: number;                // How many times we've retried (0 = first attempt)
  created_at: Date;                   // When notification was created
  updated_at: Date;                   // Last status change
}
export interface Template {
  id: string;                         // Template identifier (e.g., 'welcome_email')
  name: string;                       // Human-readable name
  channel: NotificationChannel;       // Which channel this template is for
  subject?: string;                   // Email subject (optional, only for emails)
  body: string;                       // Message body with {{variables}}
  variables: string[];                // List of required variables ['name', 'link']
  created_at: Date;
  updated_at: Date;
}
export interface DeliveryLog {
  id: string;                         // Log entry ID
  notification_id: string;            // Which notification (foreign key)
  attempt: number;                    // Attempt number (1, 2, 3...)
  status: NotificationStatus;         // Result of this attempt
  error_message?: string;             // What went wrong (if failed)
  provider_response?: Record<string, any>; // Raw response from SendGrid/Twilio/etc
  created_at: Date;                   // When this attempt happened
}

// QUEUE JOB DATA
export interface NotificationJobData {
  notificationId: string;             // ID of notification to process
}

// API RESPONSES
export interface CreateNotificationResponse {
  success: boolean;
  message: string;
  data: {
    id: string;                      
    status: NotificationStatus;       
  };
}

export interface GetNotificationResponse {
  success: boolean;
  data: {
    id: string;
    user_id: string;
    channel: NotificationChannel;
    template_id: string;
    status: NotificationStatus;
    created_at: Date;
    updated_at: Date;
    error_message?: string;
  };
}

export interface ErrorResponse {
  success: false;
  error: string;
  details?: any;
}